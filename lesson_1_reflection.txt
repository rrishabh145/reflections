How did viewing a diff between two versions of a file help you see the bug that
was introduced?

It becomes easier to compare what new changes were done when comparing two files.
We know that bug must've been introduced during editing of the old and new file.
SO this way comparing old and new file helps in finding out the line in which bug 
might've been intoduced.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

There might be instances where i might create some additions to my existing file 
and then save it. During a bigger project, there are chances that my earlier code 
or file was working perfectly but my newer version is not. So i might wanna go back 
to the old version. For that i might wanna save all the previous files too.

What do you think are the pros and cons of manually choosing when to create a commit, 
like you do in Git, vs having versions automatically saved, like Google Docs does?

In manually doing changes, the user can choose when to make a logical comit in Git.
But there are instances when the user may forget to make commits and end up forgetting
to commits at all. In such cases automatically saving of commits is beneficial.
However in automatic saving of commits there can be instances when not much work was 
done on the file but still it was saved which serves no logical purpose.

Why do you think some version control systems, like Git, allow saving multiple files 
in one commit, while others, like Google Docs, treat each file separately?

If working on a big project, there are chances that the project may contain multiple
connected files. So it's a better idea to save multiple files of the project and easily
compare them when needed.

How can you use the commands git log and git diff to view the history of files?

The log command shows all the commits present in the version control along with their ID's.
using these ID's,  we can compare the different versions of the files. The diff command 
is used to find the difference between two files and we can easily compare and see the 
changes made in different commits.

How might using version control make you more confident to make changes that could break something?

Using version comtrol, i can revert back to the older working version if anything 
goes wrong in my program. This way i can more confidently make changes in my program which might
even sometimes lead to breaking of the program. 	

Now that you have your workspace set up, what do you want to try using Git for?

I wish to try git for my project which is related to a game built on python language.